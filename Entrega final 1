class Usuario {
    constructor(ID_us, nome, end, historico) {
        this.ID_us = ID_us;
        this.nome = nome;
        this.end = end;
        this.historico = historico;
    }
}

class Propriedade {
    constructor(ID_prop, nome, end, capacidade, numero_q, preco) {
        this.ID_prop = ID_prop;
        this.nome = nome;
        this.end = end;
        this.capacidade = capacidade;
        this.numero_q = numero_q;
        this.preco = preco;
    }
}

class Reserva {
    constructor(ID_res, ID_us, ID_prop, date_in, date_out, valor, status_pag) {
        this.ID_res = ID_res;
        this.ID_us = ID_us;
        this.ID_prop = ID_prop;
        this.date_in = date_in;
        this.date_out = date_out;
        this.valor = valor;
        this.status_pag = status_pag;
    }
}

class Anuncio {
    constructor(ID_anu, ID_prop, titulo, descricao, status) {
        this.ID_anu = ID_anu;
        this.ID_prop = ID_prop;
        this.titulo = titulo;
        this.descricao = descricao;
        this.status = status;
    }
}

class Sistema {
    constructor() {
        this.usuarios = [];
        this.propriedades = [];
        this.reservas = [];
        this.anuncios = [];
    }

    fazerReserva(ID_res, ID_us, ID_prop, date_in, date_out, valor, status_pag) {
        const reserva = new Reserva(ID_res, ID_us, ID_prop, date_in, date_out, valor, status_pag);
        this.reservas.push(reserva);
        return reserva;
    }

    criarAnuncio(ID_anu, ID_prop, titulo, descricao, status) {
        const anuncio = new Anuncio(ID_anu, ID_prop, titulo, descricao, status);
        this.anuncios.push(anuncio);
        return anuncio;
    }

    
}

//Login do Funcionario:
const funcionarioCadastrados = [
    { login: 'funcionario1', senha: 'senha123' },
    { login: 'funcionario2', senha: 'senha456' }
];

const prompt = require("prompt-sync")({sigint: true})

// Metodo 1 - Fazer Login
function fazerLogin() {
    const login = prompt('Login: ');
    const senha = prompt('senha: ');
  
    const FuncionarioValido = funcionarioCadastrados.find(
      u => u.login === login && u.senha === senha
    );
  
    if (FuncionarioValido) {
      console.log('Login bem-sucedido!');
      funcionarioLogado();
    } else {
      console.log('Usuário ou senha inválidos. Tente novamente.');
    }
    let pausa = prompt('Pressione qualquer botão para continuar:')
}

// Metodo 2 - Fazer Cadastro
function fazerCadastro() {
    const novoFuncionario = prompt('Digite o novo funcionario:');
    const novaSenha = prompt('Digite a nova senha:');
  
    const funcionarioExiste = funcionarioCadastrados.find(
      u => u.login === novoFuncionario );
  
    if (funcionarioExiste) {
        console.log('funcionario já existe.');
    } else {
        funcionarioCadastrados.push({ login: novoFuncionario, senha: novaSenha });
        console.log('Cadastro realizado!');
    }
  }


// Metodo 3 - Sair do sistema
function sairDoSistema() {
    process.exit();
  }

// Interface Funcionário logado:
function funcionarioLogado(){
    console.log('Funcionário Logado ');
  
    while(true){ // loop para manter a interface no terminal 
      console.log('\nOpções:\n');
      console.log('4. Ver meus dados \n5. Ver lista de propriedades \n6. Ver lista de reservas \n7. Ver lista de anúncios \n8. Sair\n');
  
      let opcao = prompt('Digite o numero da opção desejada: ');
        
      // Importante: os dados das classes (atributos) precisam ser definidos!
      switch (opcao) {
        case '4':
          console.log('Opção 4 selecionada: Ver meus dados');
          console.log(Usuario)
          break;
        case '5':
          console.log('Opção 5 selecionada: Ver lista de propriedades');
          console.log(Propriedade)
          break;
        case '6':
          console.log('Opção 6 selecionada: Ver lista de reservas');
          console.log(Reserva)
          break;
        case '7':
          console.log('Opção 7 selecionada: Ver lista de anúncios');
          console.log(Anuncio)
          break;
        case '8':
          console.log('Saindo do sistema...');
          process.exit()
          break;
        default:
          console.log('Opção inválida. Tente novamente.');
      }
    }
  }  

// Iniciando home do sistema


while(true){ // loop para manter a interface no terminal 

console.clear(); // limpar terminal 

console.log('Sistema de reserva Pousada Eclispe - Pagina Inicial \n')
console.log('Funcionario não Logado: \n 1.Fazer Login \n 2.Fazer cadastro \n 3.Sair do programa \n')
let operacao = prompt('Digite o numero da opção desejada: ');
if (operacao === '1'){ // se digitar 1 => executa a função fazer login e funcionairo logado(se login bem sucedido)
    fazerLogin();
} else if (operacao === '2'){ // se digitar 2 => faz o cadastro de um novo funcionario
    fazerCadastro();
}else if (operacao === '3'){ // se digitar 3 => fecha o programa 
    sairDoSistema();
} 
}
